package com.vains.authorization;import com.vains.authorization.basic.wechat.BasicAccessTokenResponseClient;import com.vains.authorization.basic.wechat.BasicAuthorizationRequestResolver;import com.vains.authorization.login.oauth2.federation.CustomOAuth2UserService;import lombok.RequiredArgsConstructor;import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.oauth2.client.registration.ClientRegistration;import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;import org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;import org.springframework.security.oauth2.core.user.OAuth2User;/** * 联合登录相关配置 * * @author vains 2023/12/28 */@RequiredArgsConstructor@Configuration(proxyBeanMethods = false)@ConditionalOnClass(ClientRegistration.class)public class FederationRelatedConfiguration {    private final ClientRegistrationRepository clientRegistrationRepository;    @Bean    @ConditionalOnMissingBean    public BasicAccessTokenResponseClient basicAccessTokenResponseClient() {        return new BasicAccessTokenResponseClient();    }    @Bean    @ConditionalOnMissingBean    public BasicAuthorizationRequestResolver basicAuthorizationRequestResolver() {        return new BasicAuthorizationRequestResolver(clientRegistrationRepository);    }    @Bean    @ConditionalOnMissingBean    public OAuth2UserService<OAuth2UserRequest, OAuth2User> oAuth2UserService() {        return new CustomOAuth2UserService();    }}